"""
Triangle, pentagonal, and hexagonal numbers are generated by the
following formulae:
Triangle 	  	T(n)=n(n+1)/2       1, 3, 6, 10, 15, ...
Pentagonal      P(n)=n(3n-1)/2     1, 5, 12, 22, 35, ...
Hexagonal 	  	H(n)=n(2n-1)       1, 6, 15, 28, 45, ...

It can be verified that T_(285) = P_(165) = H_(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

if __name__ == "__main__":
    import sys, os
    sys.path.append( os.path.join( os.getcwd(), '..' ) )

from datetime import datetime, timedelta

from euler_tools.misc import ipython

def Triangle(n_t):
    return n_t * (n_t + 1) / 2

def Pentagonal(n_p):
    return n_p * (3 * n_p - 1) / 2

def Hexagonal(n_h):
    return n_h * (2 * n_h - 1)


def find_solution():
    last_print = datetime.now()
    #~ n_t = 2
    #~ n_p = 2
    #~ n_h = 2
    n_t = 285 + 1
    n_p = 165
    n_h = 143
    result_t = Triangle(n_t)
    result_p = Pentagonal(n_p)
    result_h = Hexagonal(n_h)
    while True:
        if datetime.now() - last_print > timedelta(seconds=2):
            print result_t, result_p, result_h
            last_print = datetime.now()

        did_something = False
        if result_t < result_p or result_t < result_h:
            n_t += 1
            result_t = Triangle(n_t)
            did_something = True

        if result_p < result_t or result_p < result_h:
            n_p += 1
            result_p = Pentagonal(n_p)
            did_something = True

        if result_h < result_t or result_h < result_p:
            n_h += 1
            result_h = Hexagonal(n_h)
            did_something = True

        if result_t == result_p and result_t == result_h:
            #~ progress.clear()
            print "T: %s,\tP: %s,\tH: %s,\tResult:\t%s" % (n_t, n_p, n_h, result_t)

        if not did_something:
            #~ ipython()()
            raise Exception("did nothing")


find_solution()
